import streamlit as st
st.set_page_config(page_title="MonitorAI (PRD)", page_icon="üî¥", layout="centered")

from openai import OpenAI
import tempfile
import re
import json
import base64
from datetime import datetime
from fpdf import FPDF
import pickle
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

@st.cache_resource
def load_gabarito_embeddings():
    try:
        with open('gabarito_embeddings.pkl', 'rb') as f:
            embeddings = pickle.load(f)
        st.success(f"‚úÖ Gabarito carregado: {len(embeddings)} casos de refer√™ncia")
        return embeddings
    except FileNotFoundError:
        st.warning("‚ö†Ô∏è Arquivo gabarito_embeddings.pkl n√£o encontrado. Sistema funcionando sem refer√™ncia.")
        return None
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar gabarito: {e}")
        return None

GABARITO_EMBEDDINGS = load_gabarito_embeddings()

def find_similar_cases(query_embedding, embeddings_data, top_k=3):
    if embeddings_data is None or len(embeddings_data) == 0:
        return []
    
    gabarito_embeddings = np.array([item['embedding'] for item in embeddings_data])
    query_vector = np.array(query_embedding).reshape(1, -1)
    similarities = cosine_similarity(query_vector, gabarito_embeddings)[0]
    top_indices = np.argsort(similarities)[-top_k:][::-1]
    
    similar_cases = []
    for idx in top_indices:
        similar_cases.append({
            'similarity_score': float(similarities[idx]),
            'case_id': embeddings_data[idx]['id'],
            'metadata': embeddings_data[idx]['metadata']
        })
    
    return similar_cases

def get_gabarito_guidance(transcript_text):
    if GABARITO_EMBEDDINGS is None:
        return ""
    
    try:
        response = client.embeddings.create(
            input=transcript_text,
            model="text-embedding-3-small"
        )
        current_embedding = response.data[0].embedding
        
        similar_cases = find_similar_cases(current_embedding, GABARITO_EMBEDDINGS, top_k=3)
        
        if not similar_cases:
            return ""
        
        guidance = "\n\n=== REFER√äNCIA DO GABARITO VALIDADO ===\n"
        guidance += "Casos similares identificados (use como calibra√ß√£o de rigor):\n\n"
        
        checklist_mapping = {
            "1_atendimento_saudacao": "1. Atendimento e sauda√ß√£o (10 pts)",
            "2_dados_cadastro": "2. Coleta de dados cadastrais (6 pts)",
            "3_script_lgpd": "3. Script LGPD (2 pts)",
            "4_tecnica_eco": "4. T√©cnica do Eco (5 pts)",
            "5_escuta_atenta": "5. Escuta atenta (3 pts)",
            "6_compreensao": "6. Compreens√£o da solicita√ß√£o (5 pts)",
            "7_confirmacao_dano": "7. Confirma√ß√£o do dano (10 pts)",
            "8_cidade_loja": "8. Cidade e loja (10 pts)",
            "9_comunicacao_eficaz": "9. Comunica√ß√£o eficaz (5 pts)",
            "10_conduta_acolhedora": "10. Conduta acolhedora (4 pts)",
            "11_script_encerramento": "11. Script de encerramento (15 pts)",
            "12_pesquisa_satisfacao": "12. Pesquisa de satisfa√ß√£o (6 pts)"
        }
        
        for i, case in enumerate(similar_cases, 1):
            similarity_pct = case['similarity_score'] * 100
            metadata = case['metadata']
            
            guidance += f"CASO SIMILAR #{i} - ID {case['case_id']} (Similaridade: {similarity_pct:.1f}%):\n"
            guidance += f"Pontua√ß√£o correta: {metadata['pontuacao_esperada']}/81 pontos\n"
            guidance += "Respostas corretas validadas:\n"
            
            for criterio, resposta in metadata['checklist'].items():
                nome_legivel = checklist_mapping.get(criterio, criterio)
                guidance += f"  ‚Ä¢ {nome_legivel}: {'‚úì SIM' if resposta else '‚úó N√ÉO'}\n"
            
            guidance += "\n"
        
        guidance += "INSTRU√á√ïES CR√çTICAS DE CALIBRA√á√ÉO:\n"
        guidance += "1. Use estes casos como PADR√ÉO DE RIGOR - mantenha o mesmo n√≠vel de exig√™ncia\n"
        guidance += "2. Avalie a transcri√ß√£o atual de forma INDEPENDENTE mas CONSISTENTE com o gabarito\n"
        guidance += "3. Se houver d√∫vida entre SIM/N√ÉO, compare com casos similares acima\n"
        guidance += "4. A pontua√ß√£o final deve refletir APENAS os crit√©rios que foram REALMENTE cumpridos\n"
        guidance += "5. Seja RIGOROSO como demonstrado nos casos validados\n"
        guidance += "=== FIM DA REFER√äNCIA DO GABARITO ===\n"
        
        return guidance
    
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Erro ao buscar casos similares: {e}")
        return ""

def create_pdf(analysis, transcript_text, model_name):
    pdf = FPDF()
    pdf.add_page()
    
    pdf.set_font("Arial", "B", 16)
    
    pdf.set_fill_color(193, 0, 0)
    pdf.set_text_color(255, 255, 255)
    pdf.cell(0, 10, "MonitorAI - Relat√≥rio de Atendimento", 1, 1, "C", True)
    pdf.ln(5)
    
    pdf.set_text_color(0, 0, 0)
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, f"Data da an√°lise: {datetime.now().strftime('%d/%m/%Y %H:%M')}", 0, 1)
    pdf.cell(0, 10, f"Modelo utilizado: {model_name}", 0, 1)
    pdf.ln(5)
    
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Status Final", 0, 1)
    pdf.set_font("Arial", "", 12)
    final = analysis.get("status_final", {})
    pdf.cell(0, 10, f"Cliente: {final.get('satisfacao', 'N/A')}", 0, 1)
    pdf.cell(0, 10, f"Desfecho: {final.get('desfecho', 'N/A')}", 0, 1)
    pdf.cell(0, 10, f"Risco: {final.get('risco', 'N/A')}", 0, 1)
    pdf.ln(5)
    
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Script de Encerramento", 0, 1)
    pdf.set_font("Arial", "", 12)
    script_info = analysis.get("uso_script", {})
    pdf.cell(0, 10, f"Status: {script_info.get('status', 'N/A')}", 0, 1)
    pdf.multi_cell(0, 10, f"Justificativa: {script_info.get('justificativa', 'N/A')}")
    pdf.ln(5)
    
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Pontua√ß√£o Total", 0, 1)
    pdf.set_font("Arial", "B", 12)
    total = analysis.get("pontuacao_total", "N/A")
    pdf.cell(0, 10, f"{total} pontos de 81", 0, 1)
    pdf.ln(5)
    
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Resumo Geral", 0, 1)
    pdf.set_font("Arial", "", 12)
    pdf.multi_cell(0, 10, analysis.get("resumo_geral", "N/A"))
    pdf.ln(5)
    
    pdf.add_page()
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Checklist T√©cnico", 0, 1)
    pdf.ln(5)
    
    checklist = analysis.get("checklist", [])
    for item in checklist:
        item_num = item.get('item', '')
        criterio = item.get('criterio', '')
        pontos = item.get('pontos', 0)
        resposta = str(item.get('resposta', ''))
        justificativa = item.get('justificativa', '')
        
        pdf.set_font("Arial", "B", 12)
        pdf.multi_cell(0, 10, f"{item_num}. {criterio} ({pontos} pts)")
        pdf.set_font("Arial", "", 12)
        pdf.cell(0, 10, f"Resposta: {resposta}", 0, 1)
        pdf.multi_cell(0, 10, f"Justificativa: {justificativa}")
        pdf.ln(5)
    
    pdf.add_page()
    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Transcri√ß√£o da Liga√ß√£o", 0, 1)
    pdf.set_font("Arial", "", 10)
    pdf.multi_cell(0, 10, transcript_text)
    
    return pdf.output(dest="S").encode("latin1")

def get_pdf_download_link(pdf_bytes, filename):
    b64 = base64.b64encode(pdf_bytes).decode()
    href = f'<a href="data:application/pdf;base64,{b64}" download="{filename}">Baixar Relat√≥rio em PDF</a>'
    return href

def extract_json(text):
    start_idx = text.find('{')
    end_idx = text.rfind('}')
    
    if start_idx != -1 and end_idx != -1 and end_idx > start_idx:
        json_str = text[start_idx:end_idx+1]
        try:
            return json.loads(json_str)
        except:
            pass
    
    import re
    json_pattern = r'\{(?:[^{}]|(?R))*\}'
    matches = re.findall(json_pattern, text, re.DOTALL)
    if matches:
        for match in matches:
            try:
                return json.loads(match)
            except:
                continue
    
    raise ValueError(f"N√£o foi poss√≠vel extrair JSON v√°lido da resposta: {text[:100]}...")

st.markdown("""
<style>
h1, h2, h3 {
    color: #C10000 !important;
}
.result-box {
    background-color: #ffecec;
    padding: 1em;
    border-left: 5px solid #C10000;
    border-radius: 6px;
    font-size: 1rem;
    white-space: pre-wrap;
    line-height: 1.5;
}
.stButton>button {
    background-color: #C10000;
    color: white;
    font-weight: 500;
    border-radius: 6px;
    padding: 0.4em 1em;
    border: none;
}
.status-box {
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 15px;
    background-color: #ffecec;
    border: 1px solid #C10000;
}
.script-usado {
    background-color: #e6ffe6;
    padding: 10px;
    border-left: 5px solid #00C100;
    border-radius: 6px;
    margin-bottom: 10px;
}
.script-nao-usado {
    background-color: #ffcccc;
    padding: 10px;
    border-left: 5px solid #FF0000;
    border-radius: 6px;
    margin-bottom: 10px;
}
.criterio-sim {
    background-color: #e6ffe6;
    padding: 10px;
    border-radius: 6px;
    margin-bottom: 5px;
    border-left: 5px solid #00C100;
}
.criterio-nao {
    background-color: #ffcccc;
    padding: 10px;
    border-radius: 6px;
    margin-bottom: 5px;
    border-left: 5px solid #FF0000;
}
.progress-high {
    color: #00C100;
}
.progress-medium {
    color: #FFD700;
}
.progress-low {
    color: #FF0000;
}
.criterio-eliminatorio {
    background-color: #ffcccc;
    padding: 10px;
    border-radius: 6px;
    margin-top: 20px;
    border: 2px solid #FF0000;
    font-weight: bold;
}
</style>
""", unsafe_allow_html=True)

def get_progress_class(value):
    if value >= 70:
        return "progress-high"
    elif value >= 50:
        return "progress-medium"
    else:
        return "progress-low"

def get_script_status_class(status):
    if status.lower() == "completo" or status.lower() == "sim":
        return "script-usado"
    else:
        return "script-nao-usado"

modelo_gpt = "gpt-4-turbo"

st.title("MonitorAI V2")
st.write("An√°lise inteligente de liga√ß√µes com calibra√ß√£o por gabarito validado")

uploaded_file = st.file_uploader("Envie o √°udio da liga√ß√£o (.mp3)", type=["mp3"])

if uploaded_file is not None:
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp:
        tmp.write(uploaded_file.read())
        tmp_path = tmp.name

    st.audio(uploaded_file, format='audio/mp3')

    if st.button("üîç Analisar Atendimento"):
        with st.spinner("Transcrevendo o √°udio..."):
            with open(tmp_path, "rb") as audio_file:
                transcript = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file
                )
            transcript_text = transcript.text

        with st.expander("Ver transcri√ß√£o completa"):
            st.code(transcript_text, language="markdown")

        gabarito_guidance = ""
        if GABARITO_EMBEDDINGS:
            with st.spinner("üîç Consultando gabarito de refer√™ncia..."):
                gabarito_guidance = get_gabarito_guidance(transcript_text)
                
            if gabarito_guidance:
                with st.expander("üìö Casos Similares do Gabarito (Clique para ver)"):
                    st.text(gabarito_guidance)

        prompt = f"""
Voc√™ √© um especialista em atendimento ao cliente. Avalie a transcri√ß√£o a seguir:

TRANSCRI√á√ÉO:
\"\"\"{transcript_text}\"\"\"

{gabarito_guidance}

Retorne APENAS um JSON com os seguintes campos, sem texto adicional antes ou depois:

{{
  "status_final": {{"satisfacao": "...", "risco": "...", "desfecho": "..."}},
  "checklist": [
    {{"item": 1, "criterio": "Atendeu a liga√ß√£o prontamente, dentro de 5 seg. e utilizou a sauda√ß√£o correta com as t√©cnicas do atendimento encantador?", "pontos": 10, "resposta": "...", "justificativa": "..."}},
    ...
  ],
  "criterios_eliminatorios": [
    {{"criterio": "Ofereceu/garantiu algum servi√ßo que o cliente n√£o tinha direito?", "ocorreu": true/false, "justificativa": "..."}},
    ...
  ],
  "uso_script": {{"status": "completo/parcial/n√£o utilizado", "justificativa": "..."}},
  "pontuacao_total": ...,
  "resumo_geral": "..."
}}

Scoring logic (mandatory):
*Only add points for items marked as "yes".
*If the answer is "no", assign 0 points.
*Never display 81 points by default.
*Final score = sum of all "yes" items only.

Checklist (81 pts totais):
1. Atendeu a liga√ß√£o prontamente, dentro de 5 seg. e utilizou a sauda√ß√£o correta com as t√©cnicas do atendimento encantador? (10 Pontos)
2. Solicitou os dados do cadastro do cliente e pediu 2 telefones para contato, nome, cpf, placa do ve√≠culo e endere√ßo ? Para Bradesco/Sura/ALD: CPF e endere√ßo podem ser dispensados se j√° est√£o no sistema. S√≥ √© "sim" se todas as informa√ß√µes forem solicitadas (6 Pontos)
3. O Atendente Verbalizou o script LGPD? Script informado em INSTRU√á√ïES ADICIONAIS DE AVALIA√á√ÉO t√≥pico 2. (2 Pontos)
4. Repetiu verbalmente pelo menos duas das tr√™s informa√ß√µes principais (placa do ve√≠culo, telefone de contato, CPF) para confirmar que coletou corretamente os dados? (5 Pontos)
5. Escutou atentamente a solicita√ß√£o do segurado evitando solicita√ß√µes em duplicidade?  (3 Pontos)
6. Compreendeu a solicita√ß√£o do cliente em linha e demonstrou que entende sobre os servi√ßos da empresa? (5 Pontos)
7. Confirmou as informa√ß√µes completas sobre o dano no ve√≠culo? Confirmou data e motivo da quebra, registro do item, dano na pintura e demais informa√ß√µes necess√°rias para o correto fluxo de atendimento. (tamanho da trinca, LED, Xenon, etc) - 10 Pontos
8. Confirmou cidade para o atendimento e selecionou corretamente a primeira op√ß√£o de loja identificada pelo sistema?ATEN√á√ÉO: Ambos os crit√©rios s√£o obrigat√≥rios - confirmar cidade E selecionar loja. (10 Pontos)
9. A comunica√ß√£o com o cliente foi eficaz: n√£o houve uso de g√≠rias, linguagem inadequada ou conversas paralelas? O analista informou quando ficou ausente da linha e quando retornou? (5 Pontos)
10. A conduta do analista foi acolhedora, com sorriso na voz, empatia e desejo verdadeiro em entender e solucionar a solicita√ß√£o do cliente? (4 Pontos)
11.Realizou o script de encerramento completo, informando: prazo de validade, franquia, link de acompanhamento e vistoria, e orientou que o cliente aguarde o contato para agendamento? (15 Pontos)
12. Orientou o cliente sobre a pesquisa de satisfa√ß√£o do atendimento? (6 Pontos)

Scoring logic (mandatory):
*Only add points for items marked as "yes".
*If the answer is "no", assign 0 points.
*Never display 81 points by default.
*Final score = sum of all "yes" items only

INSTRU√á√ïES ADICIONAIS DE AVALIA√á√ÉO:
1. T√âCNICA DO ECO (Checklist 4.) - AVALIA√á√ÉO RIGOROSA E ESPEC√çFICA:

MARQUE COMO "SIM" SE QUALQUER UMA DAS CONDI√á√ïES ABAIXO FOR ATENDIDA:

### CONDI√á√ÉO A - SOLETRA√á√ÉO FON√âTICA (APROVA√á√ÉO AUTOM√ÅTICA):
- O atendente fez soletra√ß√£o fon√©tica de QUALQUER informa√ß√£o principal (placa, telefone ou CPF)
- Exemplos v√°lidos: "R de rato, W de Washington, F de faca", "rato, sapo, x√≠cara", "A de avi√£o, B de bola"
- IMPORTANTE: Uma √∫nica soletra√ß√£o fon√©tica √© suficiente para marcar "SIM"

### CONDI√á√ÉO B - ECO M√öLTIPLO:
- O atendente repetiu (completa ou parcialmente) PELO MENOS 2 informa√ß√µes principais:
  * Placa do ve√≠culo
  * Telefone principal 
  * CPF
  * Telefone secund√°rio (quando fornecido)

### CONDI√á√ÉO C - ECO PARCIAL (APROVA√á√ÉO FLEX√çVEL):
- O atendente repetiu parte significativa de uma informa√ß√£o principal
- Exemplos v√°lidos: 
  * Cliente: "0800-703-0203" ‚Üí Atendente: "0203" ‚úì (√∫ltimos d√≠gitos)
  * Cliente: "679-997-812" ‚Üí Atendente: "812" ‚úì (parte final)
  * Cliente: "54-3381-5775" ‚Üí Atendente: "5775" ‚úì (√∫ltimos d√≠gitos)
- IMPORTANTE: Eco parcial de d√≠gitos finais √© v√°lido mesmo sem confirma√ß√£o expl√≠cita

### CONDI√á√ÉO D - ECO INTERROGATIVO CONFIRMADO:
- O atendente repetiu informa√ß√£o com tom interrogativo E o cliente confirmou
- Exemplos v√°lidos:
  * "54-3381-5775?" ‚Üí Cliente: "Isso"
  * "√â 79150-005?" ‚Üí Cliente: "Sim"

### FORMAS V√ÅLIDAS DE ECO (EXEMPLOS ESPEC√çFICOS):
1. **Repeti√ß√£o completa**: "54-3381-5775"
2. **Repeti√ß√£o parcial**: "0203" (√∫ltimos d√≠gitos)
3. **Soletra√ß√£o fon√©tica**: "R de rato, W de Washington, F de faca"
4. **Confirma√ß√£o repetindo**: "√â 679-997-812, correto?"
5. **Eco interrogativo**: "54-99113-0199?"

### N√ÉO √â ECO V√ÅLIDO:
- Apenas "ok", "certo", "entendi", "perfeito" sem repetir informa√ß√£o
- Repeti√ß√£o sem confirma√ß√£o do cliente quando necess√°ria
- Eco de informa√ß√µes n√£o principais (nome, endere√ßo sem n√∫mero)

### INSTRU√á√ïES ESPEC√çFICAS PARA AVALIA√á√ÉO:
1. **PRIORIDADE M√ÅXIMA**: Se houver soletra√ß√£o fon√©tica, marque "SIM" imediatamente
2. **ECO PARCIAL √â V√ÅLIDO**: Repeti√ß√£o de 3+ d√≠gitos finais de telefone/CPF √© suficiente
3. **CONTE TELEFONES SEPARADAMENTE**: Telefone principal e secund√°rio s√£o informa√ß√µes distintas
4. **CONTEXTO IMPORTA**: Eco imediatamente ap√≥s cliente fornecer informa√ß√£o √© mais v√°lido

### CASOS ESPEC√çFICOS VERDADEIROS:
- "R de rato, W de Washington, F de faca, 9, B de bola, 45" ‚Üí Cliente: "Isso" ‚úì
- "54-3381-5775?" ‚Üí Cliente: "Isso" ‚úì
- "0203" (ap√≥s cliente: "0800-703-0203") ‚úì V√ÅLIDO SEM CONFIRMA√á√ÉO
- "√â rato, sapo, x√≠cara, seis..." ‚Üí Cliente: "Isso" ‚úì

REGRA ESPECIAL PARA ECO PARCIAL: Se o atendente repetir os √∫ltimos 3 ou mais d√≠gitos de um telefone ou CPF imediatamente ap√≥s o cliente fornec√™-lo, considere como eco v√°lido, mesmo sem confirma√ß√£o expl√≠cita do cliente.

### NA JUSTIFICATIVA, ESPECIFIQUE:
- Qual(is) informa√ß√£o(√µes) tiveram eco
- Tipo de eco utilizado (completo, parcial, soletra√ß√£o, interrogativo)
- Se houve confirma√ß√£o do cliente
- Transcri√ß√£o exata do eco identificado

IMPORTANTE: Esta avalia√ß√£o deve ser RIGOROSA mas JUSTA. Se houver d√∫vida entre SIM e N√ÉO, considere o contexto de confirma√ß√£o do cliente para decidir.

2. Script LGPD (Checklist 3.): O atendente deve mencionar explicitamente que o telefone ser√° compartilhado com o prestador de servi√ßo, com √™nfase em privacidade ou consentimento. As seguintes varia√ß√µes s√£o v√°lidas e devem ser aceitas como equivalentes:
    2.1 Voc√™ permite que a nossa empresa compartilhe o seu telefone com o prestador que ir√° lhe atender?
    2.2 Podemos compartilhar seu telefone com o prestador que ir√° realizar o servi√ßo?
    2.3 Seu telefone pode ser informado ao prestador que ir√° realizar o servi√ßo?
    2.4 O prestador pode ter acesso ao seu n√∫mero para realizar o agendamento do servi√ßo?
    2.5 Podemos compartilhar seu telefone com o prestador que ir√° te atender?
    2.6 Voc√™ autoriza o compartilhamento do telefone informado com o prestador que ir√° te atender?
    2.7 Pode considerar como "SIM" caso tenha uma men√ß√£o informando o seguinte cen√°rio "Voc√™ autoriza a enviar notifica√ß√µes no telefone WhatsApp", ou algo similar.

3. Confirma√ß√£o de hist√≥rico: Verifique se h√° men√ß√£o expl√≠cita ao hist√≥rico de utiliza√ß√£o do servi√ßo pelo cliente. A simples localiza√ß√£o do cliente no sistema N√ÉO constitui confirma√ß√£o de hist√≥rico.

4. Pontua√ß√£o: Cada item n√£o realizado deve impactar estritamente a pontua√ß√£o final. Os pontos m√°ximos de cada item est√£o indicados entre par√™nteses - se marcado como "n√£o", zero pontos devem ser atribu√≠dos.

5. Crit√©rios eliminat√≥rios: Avalie com alto rigor - qualquer ocorr√™ncia, mesmo que sutil, deve ser marcada.

6. Script de encerramento: Compare literalmente com o modelo fornecido - s√≥ marque como "completo" se TODOS os elementos estiverem presentes (validade, franquia, link, pesquisa de satisfa√ß√£o e despedida).

7. SOLICITA√á√ÉO DE DADOS DO CADASTRO (Checklist 2) - AVALIA√á√ÉO RIGOROSA E ESPEC√çFICA:

MARQUE COMO "SIM" APENAS SE O ATENDENTE SOLICITOU EXPLICITAMENTE TODOS OS 6 DADOS OBRIGAT√ìRIOS:

### DADOS OBRIGAT√ìRIOS (6 elementos):
1. **NOME** do cliente
2. **CPF** do cliente
3. **PLACA** do ve√≠culo
4. **ENDERE√áO** do cliente
5. **TELEFONE PRINCIPAL** (1¬∫ telefone)
6. **TELEFONE SECUND√ÅRIO** (2¬∫ telefone)

### CRIT√âRIO DE "SOLICITA√á√ÉO" V√ÅLIDA:
- O atendente deve PERGUNTAR/PEDIR explicitamente cada dado
- Exemplos v√°lidos de solicita√ß√£o:
  * "Qual √© o seu nome completo?"
  * "Pode me informar o seu CPF?"
  * "Qual a placa do ve√≠culo?"
  * "Qual √© o seu endere√ßo?"
  * "Me passa um telefone para contato?"
  * "Tem um segundo telefone?"

### N√ÉO √â SOLICITA√á√ÉO V√ÅLIDA:
- Cliente se identificar espontaneamente ("Meu nome √© Jo√£o")
- Atendente apenas confirmar dados j√° fornecidos
- Dados j√° vis√≠veis no sistema sem confirma√ß√£o
- Perguntar "mais algum n√∫mero?" sem especificar que precisa de 2¬∫ telefone

### EXCE√á√ÉO PARA BRADESCO/SURA/ALD:
- **CPF e ENDERE√áO** podem ser dispensados APENAS se o atendente CONFIRMAR explicitamente que j√° est√£o no sistema
- Exemplos v√°lidos de dispensa:
  * "Vejo aqui que j√° temos seu CPF no sistema"
  * "Seu endere√ßo j√° consta aqui no cadastro"
  * "Localizei seus dados completos no sistema"
- IMPORTANTE: Simples omiss√£o sem justificativa = FALSO

### TELEFONE SECUND√ÅRIO - REGRA ESPECIAL:
- Deve ser solicitado OBRIGATORIAMENTE para todas as seguradoras
- "Cliente n√£o tem" ou "s√≥ tenho esse" N√ÉO dispensa a solicita√ß√£o
- O atendente deve perguntar explicitamente por um segundo n√∫mero
- Exemplo correto: "Quer deixar uma segunda op√ß√£o de telefone?"

### INSTRU√á√ïES ESPEC√çFICAS PARA AVALIA√á√ÉO:
1. **CONTE CADA DADO INDIVIDUALMENTE**: Verifique se cada um dos 6 dados foi solicitado
2. **SOLICITA√á√ÉO ‚â† CONFIRMA√á√ÉO**: Repetir dados j√° fornecidos n√£o √© solicitar
3. **SEJA RIGOROSO**: A aus√™ncia de qualquer dado resulta em "N√ÉO"
4. **IDENTIFIQUE A SEGURADORA**: Aplique exce√ß√£o apenas para Bradesco/Sura/ALD
5. **JUSTIFIQUE ESPECIFICAMENTE**: Liste quais dados faltaram

### REGRA FINAL:
TODOS os 6 dados devem ser explicitamente solicitados. Para Bradesco/Sura/ALD, CPF e endere√ßo podem ser dispensados apenas se o atendente confirmar que j√° est√£o no sistema. A aus√™ncia de qualquer dado obrigat√≥rio resulta em "N√ÉO" e 0 pontos.

Crit√©rios Eliminat√≥rios (cada um resulta em 0 pontos se ocorrer):
- Ofereceu/garantiu algum servi√ßo que o cliente n√£o tinha direito? 
  Exemplos: Prometer servi√ßos fora da cobertura, dar garantias n√£o previstas no contrato.
- Preencheu ou selecionou o Ve√≠culo/pe√ßa incorretos?
  Exemplos: Registrar modelo diferente do informado, selecionar pe√ßa diferente da solicitada.
- Agiu de forma rude, grosseira, n√£o deixando o cliente falar e/ou se alterou na liga√ß√£o?
  Exemplos: Interrup√ß√µes constantes, tom agressivo, impedir cliente de explicar situa√ß√£o.
- Encerrou a chamada ou transferiu o cliente sem o seu conhecimento?
  Exemplos: Desligar abruptamente, transferir sem explicar ou obter consentimento.
- Falou negativamente sobre a Carglass, afiliados, seguradoras ou colegas de trabalho?
  Exemplos: Criticar atendimento pr√©vio, fazer coment√°rios pejorativos sobre a empresa.
- Forneceu informa√ß√µes incorretas ou fez suposi√ß√µes infundadas sobre garantias, servi√ßos ou procedimentos?
  Exemplos: "Como a lataria j√° passou para n√≥s, ent√£o provavelmente a sua garantia √© motor e c√¢mbio" sem ter certeza disso, sugerir que o cliente pode perder a garantia do ve√≠culo.
- Comentou sobre servi√ßos de terceiros ou orientou o cliente para servi√ßos externos sem autoriza√ß√£o?
  Exemplos: Sugerir que o cliente verifique procedimentos com a concession√°ria primeiro, fazer compara√ß√µes com outros servi√ßos, discutir pol√≠ticas de garantia de outras empresas sem necessidade.

ATEN√á√ÉO: Avalie com rigor frases como "N√£o teria problema em mexer na lataria e o senhor perder a garantia?" ou "provavelmente a sua garantia √© motor e c√¢mbio" - estas constituem informa√ß√µes incorretas ou suposi√ß√µes sem confirma√ß√£o que podem confundir o cliente e s√£o consideradas viola√ß√µes de crit√©rios eliminat√≥rios.

O script correto para a pergunta 12 √©:
"*obrigada por me aguardar! O seu atendimento foi gerado, e em breve receber√° dois links no whatsapp informado, para acompanhar o pedido e realizar a vistoria.*
*Lembrando que o seu atendimento tem uma franquia de XXX que dever√° ser paga no ato do atendimento. (****acess√≥rios/RRSM ****- tem uma franquia que ser√° confirmada ap√≥s a vistoria).*
*Te ajudo com algo mais?*
*Ao final do atendimento ter√° uma pesquisa de Satisfa√ß√£o, a nota 5 √© a m√°xima, tudo bem?*
*Agrade√ßo o seu contato, tenha um excelente dia!"*

Avalie se o script acima foi utilizado completamente ou n√£o foi utilizado.

IMPORTANTE: Retorne APENAS o JSON, sem nenhum texto adicional, sem decoradores de c√≥digo como ```json ou ```, e sem explica√ß√µes adicionais.
"""

        with st.spinner("Analisando a conversa com calibra√ß√£o do gabarito..."):
            try:
                response = client.chat.completions.create(
                    model=modelo_gpt,
                    messages=[
                        {"role": "system", "content": "Voc√™ √© um analista especializado em atendimento. Responda APENAS com o JSON solicitado, sem texto adicional, sem marcadores de c√≥digo como ```json, e sem explica√ß√µes."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.3,
                    response_format={"type": "json_object"}
                )
                result = response.choices[0].message.content.strip()

                with st.expander("Debug - Resposta bruta"):
                    st.code(result, language="json")
                
                try:
                    if not result.startswith("{"):
                        analysis = extract_json(result)
                    else:
                        analysis = json.loads(result)
                except Exception as json_error:
                    st.error(f"Erro ao processar JSON: {str(json_error)}")
                    st.text_area("Resposta da IA:", value=result, height=300)
                    st.stop()

                st.subheader("üìã Status Final")
                final = analysis.get("status_final", {})
                st.markdown(f"""
                <div class="status-box">
                <strong>Cliente:</strong> {final.get("satisfacao")}<br>
                <strong>Desfecho:</strong> {final.get("desfecho")}<br>
                <strong>Risco:</strong> {final.get("risco")}
                </div>
                """, unsafe_allow_html=True)

                st.subheader("üìù Script de Encerramento")
                script_info = analysis.get("uso_script", {})
                script_status = script_info.get("status", "N√£o avaliado")
                script_class = get_script_status_class(script_status)
                
                st.markdown(f"""
                <div class="{script_class}">
                <strong>Status:</strong> {script_status}<br>
                <strong>Justificativa:</strong> {script_info.get("justificativa", "N√£o informado")}
                </div>
                """, unsafe_allow_html=True)

                st.subheader("‚ö†Ô∏è Crit√©rios Eliminat√≥rios")
                criterios_elim = analysis.get("criterios_eliminatorios", [])
                criterios_violados = False
                
                for criterio in criterios_elim:
                    if criterio.get("ocorreu", False):
                        criterios_violados = True
                        st.markdown(f"""
                        <div class="criterio-eliminatorio">
                        <strong>{criterio.get('criterio')}</strong><br>
                        {criterio.get('justificativa', '')}
                        </div>
                        """, unsafe_allow_html=True)
                
                if not criterios_violados:
                    st.success("Nenhum crit√©rio eliminat√≥rio foi violado.")

                st.subheader("‚úÖ Checklist T√©cnico")
                checklist = analysis.get("checklist", [])
                total = float(re.sub(r"[^\d.]", "", str(analysis.get("pontuacao_total", "0"))))
                progress_class = get_progress_class(total)
                st.progress(min(total / 100, 1.0))
                st.markdown(f"<h3 class='{progress_class}'>{int(total)} pontos de 81</h3>", unsafe_allow_html=True)

                with st.expander("Ver Detalhes do Checklist"):
                    for item in checklist:
                        resposta = item.get("resposta", "").lower()
                        if resposta == "sim":
                            classe = "criterio-sim"
                            icone = "‚úÖ"
                        else:
                            classe = "criterio-nao"
                            icone = "‚ùå"
                        
                        st.markdown(f"""
                        <div class="{classe}">
                        {icone} <strong>{item.get('item')}. {item.get('criterio')}</strong> ({item.get('pontos')} pts)<br>
                        <em>{item.get('justificativa')}</em>
                        </div>
                        """, unsafe_allow_html=True)

                st.subheader("üìù Resumo Geral")
                st.markdown(f"<div class='result-box'>{analysis.get('resumo_geral')}</div>", unsafe_allow_html=True)
                
                st.subheader("üìÑ Relat√≥rio em PDF")
                try:
                    pdf_bytes = create_pdf(analysis, transcript_text, modelo_gpt)
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"MonitorAI_Relatorio_{timestamp}.pdf"
                    st.markdown(get_pdf_download_link(pdf_bytes, filename), unsafe_allow_html=True)
                except Exception as pdf_error:
                    st.error(f"Erro ao gerar PDF: {str(pdf_error)}")

            except Exception as e:
                st.error(f"Erro ao processar a an√°lise: {str(e)}")
                try:
                    st.text_area("Resposta da IA:", value=response.choices[0].message.content.strip(), height=300)
                except:
                    st.text_area("N√£o foi poss√≠vel recuperar a resposta da IA", height=300)
